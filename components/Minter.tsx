"use client"
import React from 'react'
import { useState } from 'react'
import axios from 'axios'
import { NFTStorage, File } from 'nft.storage';
import {mintNFT} from '@/utils/utils' 
import { useWallet } from '@solana/wallet-adapter-react';
import { PhantomWalletAdapter } from '@solana/wallet-adapter-wallets';
import dynamic from 'next/dynamic';

const NFT_KEY = 'd8ad1641.03702b2305384662ac45bebc9476908b'
console.log(NFT_KEY)

const client = new NFTStorage({ token: NFT_KEY });

interface MIntprops {
    url:string
    input:string
}

const Minter = ({url, input}:MIntprops) => {
  const { publicKey, wallet, connect } = useWallet();

  const text = input.split(" ")
  const [status, setStatus] = useState<string>()

const handleMint = async ()=> {
 console.log(url)
  if (!url) {
    setStatus('No image to mint. Please generate an image first.');
    console.log(status)
    return;
  }
  if (!wallet || !publicKey) {
    setStatus('Please connect your wallet first.');
    await connect();
    return; 
}
  try{

    const response = await axios.get(url, { responseType: 'blob' });
    console.log(response.data)
    const file = new File([response.data], `${text[0]}.png`, { type: 'image/png' });
    console.log(file)

    const metadata = await client.store({
      name: text[0],
      description: 'An NFT generated by AI from text input',
      image: file,
    });
    console.log(metadata.url)
    await mintNFT(wallet.adapter as PhantomWalletAdapter, metadata.url);
    setStatus(`NFT stored! IPFS URL: ${metadata.url}`);
    console.log(status)
  
    
  }catch(error)
  {
    console.error('Error uploading file to IPFS: ', error);
    setStatus('Upload failed!');
    console.log(status)
    
  }

}
    

  return (
    <div className=
    {url && publicKey?'bg-white m-3 w-[200px] sm:w-[500px] text-center font-bold rounded text-black p-3':'hidden'}
    onClick={handleMint}>Mint</div>
  )
}

export default dynamic (() => Promise.resolve(Minter), {ssr: false})